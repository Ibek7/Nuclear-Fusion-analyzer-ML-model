# Nuclear Fusion Analyzer Docker Compose
version: '3.8'

services:
  # Main application
  fusion-analyzer:
    build: .
    ports:
      - "8000:8000"
    environment:
      - FUSION_ENV=production
    volumes:
      - ./saved_models:/app/saved_models
      - ./logs:/app/logs
      - ./results:/app/results
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  # Development version with code mounting
  fusion-analyzer-dev:
    build: .
    ports:
      - "8001:8000"
    environment:
      - FUSION_ENV=development
    volumes:
      - .:/app
      - ./saved_models:/app/saved_models
      - ./logs:/app/logs
    command: ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    profiles:
      - development
    
  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - full
    
  # PostgreSQL for data storage (optional)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: fusion_analyzer
      POSTGRES_USER: fusion_user
      POSTGRES_PASSWORD: fusion_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - full
    
  # Jupyter notebook server
  jupyter:
    build: .
    ports:
      - "8888:8888"
    environment:
      - FUSION_ENV=development
    volumes:
      - .:/app
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''"]
    profiles:
      - development
      - jupyter

volumes:
  redis_data:
  postgres_data: